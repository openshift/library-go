// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	operator_v1 "github.com/openshift/api/operator/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeOpenShiftControllerManagers implements OpenShiftControllerManagerInterface
type FakeOpenShiftControllerManagers struct {
	Fake *FakeOperatorV1
}

var openshiftcontrollermanagersResource = schema.GroupVersionResource{Group: "operator.openshift.io", Version: "v1", Resource: "openshiftcontrollermanagers"}

var openshiftcontrollermanagersKind = schema.GroupVersionKind{Group: "operator.openshift.io", Version: "v1", Kind: "OpenShiftControllerManager"}

// Get takes name of the openShiftControllerManager, and returns the corresponding openShiftControllerManager object, and an error if there is any.
func (c *FakeOpenShiftControllerManagers) Get(name string, options v1.GetOptions) (result *operator_v1.OpenShiftControllerManager, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(openshiftcontrollermanagersResource, name), &operator_v1.OpenShiftControllerManager{})
	if obj == nil {
		return nil, err
	}
	return obj.(*operator_v1.OpenShiftControllerManager), err
}

// List takes label and field selectors, and returns the list of OpenShiftControllerManagers that match those selectors.
func (c *FakeOpenShiftControllerManagers) List(opts v1.ListOptions) (result *operator_v1.OpenShiftControllerManagerList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(openshiftcontrollermanagersResource, openshiftcontrollermanagersKind, opts), &operator_v1.OpenShiftControllerManagerList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &operator_v1.OpenShiftControllerManagerList{ListMeta: obj.(*operator_v1.OpenShiftControllerManagerList).ListMeta}
	for _, item := range obj.(*operator_v1.OpenShiftControllerManagerList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested openShiftControllerManagers.
func (c *FakeOpenShiftControllerManagers) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(openshiftcontrollermanagersResource, opts))
}

// Create takes the representation of a openShiftControllerManager and creates it.  Returns the server's representation of the openShiftControllerManager, and an error, if there is any.
func (c *FakeOpenShiftControllerManagers) Create(openShiftControllerManager *operator_v1.OpenShiftControllerManager) (result *operator_v1.OpenShiftControllerManager, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(openshiftcontrollermanagersResource, openShiftControllerManager), &operator_v1.OpenShiftControllerManager{})
	if obj == nil {
		return nil, err
	}
	return obj.(*operator_v1.OpenShiftControllerManager), err
}

// Update takes the representation of a openShiftControllerManager and updates it. Returns the server's representation of the openShiftControllerManager, and an error, if there is any.
func (c *FakeOpenShiftControllerManagers) Update(openShiftControllerManager *operator_v1.OpenShiftControllerManager) (result *operator_v1.OpenShiftControllerManager, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(openshiftcontrollermanagersResource, openShiftControllerManager), &operator_v1.OpenShiftControllerManager{})
	if obj == nil {
		return nil, err
	}
	return obj.(*operator_v1.OpenShiftControllerManager), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeOpenShiftControllerManagers) UpdateStatus(openShiftControllerManager *operator_v1.OpenShiftControllerManager) (*operator_v1.OpenShiftControllerManager, error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateSubresourceAction(openshiftcontrollermanagersResource, "status", openShiftControllerManager), &operator_v1.OpenShiftControllerManager{})
	if obj == nil {
		return nil, err
	}
	return obj.(*operator_v1.OpenShiftControllerManager), err
}

// Delete takes name of the openShiftControllerManager and deletes it. Returns an error if one occurs.
func (c *FakeOpenShiftControllerManagers) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteAction(openshiftcontrollermanagersResource, name), &operator_v1.OpenShiftControllerManager{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeOpenShiftControllerManagers) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(openshiftcontrollermanagersResource, listOptions)

	_, err := c.Fake.Invokes(action, &operator_v1.OpenShiftControllerManagerList{})
	return err
}

// Patch applies the patch and returns the patched openShiftControllerManager.
func (c *FakeOpenShiftControllerManagers) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *operator_v1.OpenShiftControllerManager, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(openshiftcontrollermanagersResource, name, data, subresources...), &operator_v1.OpenShiftControllerManager{})
	if obj == nil {
		return nil, err
	}
	return obj.(*operator_v1.OpenShiftControllerManager), err
}

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	v1 "github.com/openshift/api/quota/v1"
	quotav1 "github.com/openshift/client-go/quota/applyconfigurations/quota/v1"
	typedquotav1 "github.com/openshift/client-go/quota/clientset/versioned/typed/quota/v1"
	gentype "k8s.io/client-go/gentype"
)

// fakeClusterResourceQuotas implements ClusterResourceQuotaInterface
type fakeClusterResourceQuotas struct {
	*gentype.FakeClientWithListAndApply[*v1.ClusterResourceQuota, *v1.ClusterResourceQuotaList, *quotav1.ClusterResourceQuotaApplyConfiguration]
	Fake *FakeQuotaV1
}

func newFakeClusterResourceQuotas(fake *FakeQuotaV1) typedquotav1.ClusterResourceQuotaInterface {
	return &fakeClusterResourceQuotas{
		gentype.NewFakeClientWithListAndApply[*v1.ClusterResourceQuota, *v1.ClusterResourceQuotaList, *quotav1.ClusterResourceQuotaApplyConfiguration](
			fake.Fake,
			"",
			v1.SchemeGroupVersion.WithResource("clusterresourcequotas"),
			v1.SchemeGroupVersion.WithKind("ClusterResourceQuota"),
			func() *v1.ClusterResourceQuota { return &v1.ClusterResourceQuota{} },
			func() *v1.ClusterResourceQuotaList { return &v1.ClusterResourceQuotaList{} },
			func(dst, src *v1.ClusterResourceQuotaList) { dst.ListMeta = src.ListMeta },
			func(list *v1.ClusterResourceQuotaList) []*v1.ClusterResourceQuota {
				return gentype.ToPointerSlice(list.Items)
			},
			func(list *v1.ClusterResourceQuotaList, items []*v1.ClusterResourceQuota) {
				list.Items = gentype.FromPointerSlice(items)
			},
		),
		fake,
	}
}
